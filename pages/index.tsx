import Head from 'next/head'
import Image from 'next/image'

import { gql, useQuery } from '@apollo/client'
import {useCallback, useState} from "react";
import {useBottomScrollListener} from "react-bottom-scroll-listener";
import {StarIcon} from "@heroicons/react/20/solid";
import {HeartIcon} from "@heroicons/react/24/outline";
import {BiHotel} from "react-icons/bi";
import {BsChevronLeft, BsChevronRight, BsHouseDoor} from "react-icons/bs";
import {MdApartment, MdCabin} from "react-icons/md";
import {RiSailboatLine} from "react-icons/ri";
import {GiBarn, GiCampfire, GiCaravan, GiCastle, GiFarmTractor} from "react-icons/gi";
import apolloClient from "../lib/apollo";

const icons = [
  {
    text: "Houses",
    icon: BsHouseDoor,
    type: "House"
  },
  {
    icon: MdApartment,
    text: "Apartments",
    type: "Apartment"
  },
  {
    icon: RiSailboatLine,
    text: "Boats",
    type: "Boat"
  },
  {
    icon: GiFarmTractor,
    text: "Farms",
    type: "Farm stay",
  },
  {
    icon: BiHotel,
    text: "Hotels",
    type: "Hotel"
  },
  {
    icon: MdCabin,
    text: "Cabins",
    type: "Cabin",
  },
  {
    icon: GiCastle,
    text: "Castles",
    type: "Castle",
  },
  {
    icon: GiCampfire,
    text: "Campsites",
    type: "Campsite"
  },
  {
    icon: GiBarn,
    text: "Barns",
    type: "Barn",
  },
  {
    icon: GiCaravan,
    text: "Camper",
    type: "Camper/RV"
  }
]

const GetListings = gql`
  query GetListing($first: Int, $after: String, $query: ListingInput) {
    listings(first: $first, after: $after, query: $query) {
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          id
          price
          images {
            picture_url
          }
          address {
            street
            country
          }
          review_scores {
            review_scores_rating
          }
          property_type
        }
      }
    }
  }
`

export default function Home() {
  const [filter, setFilter] = useState({});
  const {data, loading, error, fetchMore} = useQuery(GetListings, {
    variables: {first: 20, query: filter}
  })
  const [scrolled, setScrolled] = useState(0)

  const { endCursor, hasNextPage } = data?.listings.pageInfo || {}

  const handleOnDocumentBottom = useCallback(() => {

    if(hasNextPage) {
      fetchMore({
        variables: {after: endCursor},
        updateQuery: (prevResult, {fetchMoreResult}) => {
          fetchMoreResult.listings.edges = [
            ...prevResult.listings.edges,
            ...fetchMoreResult.listings.edges,
          ];
          return fetchMoreResult;
        },
      }).then(r => console.log(r)).catch(error => console.error(error));
    }
  }, [endCursor, fetchMore, hasNextPage]);

  useBottomScrollListener(handleOnDocumentBottom);

  const handlePropertyClick = (type: String) => {
    setFilter({...filter, property_type: type});
    apolloClient.resetStore()
  }

  const handlePropertyScrolled = (direction: String) => {
    if(direction === "left" && scrolled > 0) {
      setScrolled(scrolled - 1);
    } else if(direction === "right") {
      setScrolled(scrolled + 1);
    }
  }

  if (error) return <p>Oh no... {error.message}</p>
  if (data) { console.log(data) }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={'py-4 sticky top-0 z-10 bg-light overflow-x-hidden'}>
        <header className={'flex pl-4 relative'}>
          <div className={'flex gap-12 bg-light relative transition-all'} style={{left: `${scrolled * -400}px`}}>
            {icons.map(icon =>
              <button
                key={icon.text} onClick={() => handlePropertyClick(icon.type)} className={'flex flex-col items-center opacity-50 hover:opacity-100'}>
                <icon.icon className={'w-6 h-6'}/>
                <span className={'text-sm'}>{icon.text}</span>
              </button>
            )}
          </div>
          {
            scrolled > 0 &&
            <div className={'absolute w-auto h-full bg-light z-20 flex justify-end items-center left-0'}>
              <button onClick={() => handlePropertyScrolled("left")}
                      className={'rounded-full border border-dark p-1 mx-4 opacity-40 hover:opacity-100'}>
                <BsChevronLeft/>
              </button>
            </div>
          }
          <div className={'absolute w-auto h-full bg-light z-20 flex justify-end items-center right-0'}>
            <button onClick={() => handlePropertyScrolled("right")}
              className={'rounded-full border border-dark p-1 mx-4 opacity-40 hover:opacity-100'}>
              <BsChevronRight/>
            </button>
            <button className={'rounded-3xl px-6 py-2 border border-dark shadow-md'}>Filter</button>
          </div>
        </header>
      </div>
      { loading &&
        <div className="flex flex-col items-center justify-center space-x-2 my-8">
          <h2 className={'my-8'}>Loading Listings...</h2>
          <div className="spinner-border animate-spin inline-block w-12 h-12 border-4 rounded-full" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
        </div>
      }
      <div className={'grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 p-4'}>
        {data?.listings.edges.map((listing) =>
          <div key={listing.node.id} className={'relative w-full h-full max-w-[350px] m-auto'}>
            <div className={'aspect-square '}>
              <Image className={'rounded-md w-full h-full object-cover'} src={listing.node.images.picture_url} width={500} height={500}
                     alt={''}/>
            </div>
            <HeartIcon className={'w-6 h-6 absolute top-4 right-4'}/>
            <div className={'flex justify-between items-center w-full'}>
              <h2 className={'font-semibold overflow-ellipsis'}>
                {listing.node.address.country === "United States" ? `${listing.node.address.street.split(",")[0]},${listing.node.address.street.split(",")[1]}` : `${listing.node.address.street.split(",")[0]},${listing.node.address.street.split(",")[2]}` }
              </h2>
              { listing.node.rating > 0 ?
                <span className={'flex items-center'}>
                  {(listing.node.review_scores.review_scores_rating / 100 * 5).toFixed(1)}
                  <StarIcon className={'ml-1 w-4 h-4'}/>
                </span>
                :
                <span className={'text-sm'}>No Reviews</span>
              }
            </div>
            <p>{listing.node.property_type}</p>
            <p>${listing.node.price}</p>
          </div>
        )}
      </div>
    </div>
  )
}