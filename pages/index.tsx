import Head from 'next/head'
import Image from 'next/image'

import { gql, useQuery } from '@apollo/client'
import {createRef, useCallback, useEffect, useRef, useState} from "react";
import {useBottomScrollListener} from "react-bottom-scroll-listener";
import {StarIcon} from "@heroicons/react/20/solid";
import {HeartIcon} from "@heroicons/react/24/outline";
import {BiBuildingHouse, BiHotel} from "react-icons/bi";
import {BsBuilding, BsChevronLeft, BsChevronRight, BsHouseDoor, BsLadder} from "react-icons/bs";
import { MdApartment, MdCabin, MdOutlineFreeBreakfast} from "react-icons/md";
import {RiSailboatLine} from "react-icons/ri";
import {GiBarn, GiBunkBeds, GiCampfire, GiCaravan, GiCastle, GiFarmTractor, GiTreehouse} from "react-icons/gi";
import {IoEarthSharp} from "react-icons/io5";
import Link from "next/link";
import NavBar from "../components/NavBar";
import AccountMenu from "../components/AccountMenu";
import useWindowDimensions from "../lib/useWindowDimensions"

const icons = [
  {
    text: "Houses",
    icon: BsHouseDoor,
    type: "House"
  },
  {
    icon: MdApartment,
    text: "Apartments",
    type: "Apartment"
  },
  {
    icon: BsBuilding,
    text: "Condos",
    type: "Condominium",
  },
  {
    icon: BiBuildingHouse,
    text: "Guesthouses",
    type: "Guesthouse",
  },
  {
    icon: GiBunkBeds,
    text: "Hostels",
    type: "Hostel",
  },
  {
    icon: BsLadder,
    text: "Lofts",
    type: "Loft"
  },
  {
    icon: MdOutlineFreeBreakfast,
    text: "B&B's",
    type: "Bed and breakfast",
  },
  {
    icon: BiHotel,
    text: "Hotels",
    type: "Hotel"
  },
  {
    icon: MdCabin,
    text: "Cabins",
    type: "Cabin",
  },
  {
    icon: GiFarmTractor,
    text: "Farms",
    type: "Farm stay",
  },
  {
    icon: RiSailboatLine,
    text: "Boats",
    type: "Boat"
  },
  {
    icon: GiCastle,
    text: "Castles",
    type: "Castle",
  },
  {
    icon: GiCampfire,
    text: "Campsites",
    type: "Campsite"
  },
  {
    icon: GiBarn,
    text: "Barns",
    type: "Barn",
  },
  {
    icon: GiCaravan,
    text: "Camper",
    type: "Camper/RV"
  },
  {
    icon: GiTreehouse,
    text: "Tree Houses",
    type:"Treehouse"
  },
  {
    icon: IoEarthSharp,
    text: "Earth Houses",
    type: "Earth house"
  }
]

const GetListings = gql`
  query GetListing($first: Int, $after: String, $query: ListingInput) {
    listings(first: $first, after: $after, query: $query) {
      pageInfo {
        endCursor
        hasNextPage
      }
      edges {
        cursor
        node {
          id
          price
          images {
            picture_url
          }
          address {
            street
            country
          }
          review_scores {
            review_scores_rating
          }
          property_type
        }
      }
    }
  }
`

export default function Home() {
  const [filter, setFilter] = useState({});
  const {data, loading, error, fetchMore} = useQuery(GetListings, {
    variables: {first: 20, query: filter}
  })

  const { endCursor, hasNextPage } = data?.listings.pageInfo || {};

  const handleOnDocumentBottom = useCallback(() => {
    if(hasNextPage) {
      fetchMore({
        variables: {after: endCursor},
        updateQuery: (prevResult, {fetchMoreResult}) => {
          fetchMoreResult.listings.edges = [
            ...prevResult.listings.edges,
            ...fetchMoreResult.listings.edges,
          ];
          return fetchMoreResult;
        },
      }).then(r => console.log(r)).catch(error => console.error(error));
    }
  }, [endCursor, fetchMore, hasNextPage]);

  useBottomScrollListener(handleOnDocumentBottom);

  const handlePropertyClick = (type: String) => {
    setFilter({...filter, property_type: type});

  }

  if (error) return <p>Oh no... {error.message}</p>
  // @ts-ignore
  return (
    <div>
      <Head>
        <title>SkyBnb</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className={'sticky top-0 z-10 bg-white  shadow-lg'}>
        <div className={`flex justify-between items-center px-4`}>
          <Link href={'/'} className={'px-4 py-2 bg-primary text-light my-2 rounded-3xl'}>SkyBnB</Link>
          <button className={'rounded-3xl px-6 py-2 border border-dark shadow-md opacity-70 hover:opacity-100'}>Filter</button>
          <AccountMenu/>
        </div>
        <hr/>
      <PropertyTypeFilter onFilterSelect={handlePropertyClick}/>
      </header>

      { loading &&
        <div className="flex flex-col items-center justify-center space-x-2 my-8">
          <h2 className={'my-8'}>Loading Listings...</h2>
          <div className="spinner-border animate-spin inline-block w-12 h-12 border-4 rounded-full" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
        </div>
      }

      <div className={'grid mx-4 grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4 p-4'}>
        {data?.listings.edges.map((listing) =>
          <Link href={`/rooms/${listing.node.id}`} key={listing.node.id} className={'relative w-full h-full max-w-[350px] m-auto'}>
            <div className={'aspect-square '}>
              <Image className={'rounded-md w-full h-full object-cover'} src={listing.node.images.picture_url} width={500} height={500}
                     alt={''}/>
            </div>
            <HeartIcon className={'w-6 h-6 absolute top-4 right-4'}/>
            <div className={'flex justify-between items-center w-full'}>
              <h2 className={'font-semibold overflow-ellipsis'}>
                {listing.node.address.country === "United States" ? `${listing.node.address.street.split(",")[0]},${listing.node.address.street.split(",")[1]}` : `${listing.node.address.street.split(",")[0]},${listing.node.address.street.split(",")[2]}` }
              </h2>
              { listing.node.review_scores.review_scores_rating > 0 ?
                <span className={'flex items-center'}>
                  {(listing.node.review_scores.review_scores_rating / 100 * 5).toFixed(1)}
                  <StarIcon className={'ml-1 w-4 h-4'}/>
                </span>
                :
                <span className={'text-sm'}>No Reviews</span>
              }
            </div>
            <p>{listing.node.property_type}</p>
            <p>${listing.node.price}</p>
          </Link>
        )}
      </div>
    </div>
  )
}

const PropertyTypeFilter = ({onFilterSelect}) => {
  const [scrollCount, setScrollCount] = useState(0);
  const [refs, setRefs] = useState([]);
  const [lastDirection, setLastDirection] = useState("none");
  const dimensions = useWindowDimensions();

  useEffect(() => {
    // add or remove refs
    setRefs((refs) =>
      Array(icons.length)
        .fill(0)
        .map((_, i) => refs[i] || createRef()),
    );
  }, []);

  const handlePropertyScrolled = (direction: String) => {
    let shift;

    if (direction === "left" && scrollCount > 0) {
      if(lastDirection === "left") {
        shift = -3;
      } else {
        shift = dimensions.width <= 700 ? -5 : -7;
      }
      setLastDirection("left");
      // Prevent scrolling past beginning
      if(scrollCount + shift < 0) {
        refs[0].current.scrollIntoView();
        setScrollCount(0);
      }
      else {
        refs[scrollCount + shift].current.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
        setScrollCount(prevState => prevState + shift)
      }
    } else if (direction === "right") {
      if (lastDirection === "none" || lastDirection === "left") {
        shift = dimensions.width > 700 ? 5 : 7;
      } else if (lastDirection === "right") {
        shift = 3;
      }
      setLastDirection("right");
      if(scrollCount + shift > refs.length - 3) {
        refs[refs.length - 1].current.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
        setScrollCount(refs.length - 1);
      } else {
        refs[scrollCount + shift].current.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'center' });
        setScrollCount(prevState => prevState + shift)
      }
    }

  }
  const scrollDiv = useRef(null)

  const handleTouchStart = (event) => {

  }
// onScroll={handleScroll}
  return (
    <div className={'flex relative'}>
      <div onTouchStart={handleTouchStart}  className={`flex py-2 ${scrollCount > 3 ? 'pl-[58px]' : 'pl-4' } ${(scrollCount < refs.length - 4) ? 'pr-[58px]' : 'pr-4'} scroll-smooth overflow-hidden items-center gap-4 sm:gap-8 md:gap-12 bg-white relative transition-all`} ref={scrollDiv}>
        {icons.map((icon, index) =>
          <button
            ref={refs[index]}
            key={icon.text} onClick={() => onFilterSelect(icon.type)} className={'flex flex-col items-center opacity-70 hover:opacity-100'}>
            <icon.icon className={'w-6 h-6'}/>
            <span className={'text-sm'}>{icon.text}</span>
          </button>
        )}
      </div>
      {
        (scrollCount > 3 && dimensions.width > 700 || scrollCount > 1 && dimensions.width <= 700) &&
        <div className={'absolute w-auto h-full bg-white z-20 flex justify-end items-center left-0'}>
          <button onClick={() => handlePropertyScrolled("left")}
                  className={'rounded-full border border-dark p-1 mx-2 md:mx-4 opacity-70 hover:opacity-100'}>
            <BsChevronLeft/>
          </button>
        </div>
      }
      { (scrollCount < refs.length - 4 || scrollCount < refs.length - 3 && dimensions.width <= 700) &&
        <div className={'absolute w-auto h-full bg-white z-20 flex justify-end items-center right-0'}>
          <button onClick={() => handlePropertyScrolled("right")}
                  className={'rounded-full border border-dark p-1 mx-4 opacity-70 hover:opacity-100'}>
            <BsChevronRight/>
          </button>
        </div>
      }
    </div>
  )
}